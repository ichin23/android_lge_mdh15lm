/* touch_gt917d_prd.h
 *
 * Copyright (C) 2019 LGE.
 *
 * Author: BSP-TOUCH@lge.com
 *
 * This software is licensed under the terms of the GNU General Public
 * License version 2, as published by the Free Software Foundation, and
 * may be copied, distributed, and modified under those terms.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 */

#ifndef LGE_TOUCH_GT917D_PRD_H
#define LGE_TOUCH_GT917D_PRD_H

#include <linux/kernel.h>
#include <linux/module.h>
#include <linux/delay.h>
#include <linux/syscalls.h>
#include <linux/file.h>
#include <linux/workqueue.h>
#include <linux/interrupt.h>
#include <linux/firmware.h>
#include <linux/regulator/consumer.h>

/*
 *  Include to touch core Header File
 */
#include <touch_hwif.h>
#include <touch_core.h>

#define LOG_BUF_SIZE	512

#define GT917D_VDD	33

#define DSP_SHORT_BURN_CHK		256	// burn short chuck size
#define _SHORT_INFO_MAX			50	// short test max show 50 pairs short channels
#define _BEYOND_INFO_MAX		20	// open test max show 20 infos for each test item
#define GT917D_OPEN_RAW_SAMPLE_NUM	16	// open test raw data sampled count
#define GT917D_OPEN_JITTER_SAMPLE_NUM	50	// open test diff data sampled count
#define GT917D_OPEN_ALL_SAMPLE_NUM	(GT917D_OPEN_RAW_SAMPLE_NUM + GT917D_OPEN_JITTER_SAMPLE_NUM)	//open test all data sampled count

#define FLOAT_AMPLIFIER			1000

#define _BEYOND_MAX_LIMIT		0x0001
#define _BEYOND_MIN_LIMIT		0x0002
#define _BEYOND_ACCORD_LIMIT		0x0004
#define _BEYOND_JITTER_LIMIT		0x0010
#define _SENSOR_SHORT			0x0020

#define MIN_DRIVER_NUM	10
#define MAX_DRIVER_NUM	42
#define MIN_SENSOR_NUM	15
#define MAX_SENSOR_NUM	30

#define GT917D_DRV_HEAD		0x80
#define GT917D_SEN_HEAD		0x00

#define GT917D_REG_DSP_SHORT	0xC000
#define GT917D_REG_SEN_DRV_CNT	0x8062
#define GT917D_REG_CFG_BEG	0x8047
#define GT917D_REG_SEN_ORD	0x80B7
#define GT917D_REG_DRV_ORD	0x80D5

#define MYBIG_ENDIAN		1
#define MYLITLE_ENDIAN		0

#define _MAX_TEST		0x0001
#define _MIN_TEST		0x0002
#define _ACCORD_TEST		0x0020
#define _JITTER_TEST		0x0040
#define _RAWDATA_TEST		0x0050

#define GT917D_WAIT_RAW_MAX_TIMES	200
#define GT917D_REG_RAW_DATA		0x9B60
#define GT917D_REG_REF_DATA		0x9560
#define GT917D_REG_READ_RAW		0x8040
#define GT917D_REG_RAW_READY		0x814E
#define ITO_TEST_ITEM_NUM		6
#define SHORT_TEST_ID			0
#define RAWDATA_MAXDATA_ID		1
#define RAWDATA_MINDATA_ID		2
#define RAWDATA_ACCORD_ID		3
#define JITTER_TEST_ID			4

u8 test_cfg_info_group[] = {
	0x00, 0xD0, 0x02, 0xF0, 0x05, 0x0A, 0x09, 0x00, 0x01, 0x08,
	0x28, 0x05, 0x5A, 0x3C, 0x03, 0x05, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x87, 0x27, 0xEF,
	0x57, 0x59, 0x31, 0x0D, 0x31, 0x0D, 0x00, 0x01, 0x33, 0x1D,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00,
	0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x0F, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15,
	0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x01, 0x02, 0x03,
	0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D,
	0x0E, 0xFF, 0x00, 0x02, 0x04, 0x05, 0x06, 0x08, 0x0A, 0x1E,
	0x1F, 0x20, 0x22, 0x24, 0x29, 0x2A, 0xFF, 0xFF, 0xFF, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0x01,
};

u8 test_jitter_cfg_info_group[] = {\
	0x00,0xD0,0x02,0xF0,0x05,0x0A,0xFD,0x32,0x11,0x86,
	0x37,0x0F,0x5F,0x46,0x03,0x03,0x00,0x00,0x69,0x63,
	0x00,0x00,0x04,0x16,0x19,0x1F,0x14,0xC7,0x07,0xEF,
	0x5E,0x60,0xB2,0x04,0xB8,0x08,0x00,0xC3,0x22,0x91,
	0x03,0x34,0x0F,0x74,0x00,0x02,0x50,0x0F,0x0A,0x00,
	0x2B,0x12,0x3C,0x8A,0x10,0x68,0x19,0x28,0x00,0x04,
	0xDD,0x14,0x00,0xB1,0x1A,0x00,0x93,0x21,0x00,0x7B,
	0x2A,0x00,0x6A,0x35,0x00,0x6A,0x11,0x26,0x66,0x74,
	0x29,0x37,0x0F,0x54,0x00,0x0E,0x0F,0x00,0x00,0x54,
	0x64,0x00,0x01,0xFF,0xF1,0x3F,0x00,0x00,0x0A,0x32,
	0x96,0x96,0x64,0x00,0x00,0x06,0x41,0x03,0x04,0x00,
	0x00,0x41,0x00,0x0F,0x10,0x11,0x12,0x13,0x14,0x15,
	0x16,0x17,0x18,0x19,0x1A,0x1B,0x1C,0x01,0x02,0x03,
	0x04,0x05,0x06,0x07,0x08,0x09,0x0A,0x0B,0x0C,0x0D,
	0x0E,0xFF,0x00,0x02,0x04,0x05,0x06,0x08,0x0A,0x1E,
	0x1F,0x20,0x22,0x24,0x29,0x2A,0xFF,0xFF,0xFF,0x8C,
	0x31,0x3C,0x3C,0x00,0x8C,0x70,0x12,0x00,0x32,0x4B,
	0x5A,0x19,0x1E,0x41,0xF0,0xFF,0xF0,0x33,0x33,0x0F,
	0x1F,0x3B,0x06,0x05,0x10,0x00,0x00,0x00,0x00,0x00,
	0x37,0x0F,0x54,0x00,0x04,0x0F,0x32,0x32,0x00,0x00,
	0x0F,0x14,0x00,0x26,0x53,0x00,0x78,0x78,0x95,0x32,
	0x55,0x03,0x3C,0x43,0xE0,0x00,0x00,0x32,0x06,0x00,
	0x1E,0x03,0x0A,0x41,0x00,0x00,0xE3,0x01
};

unsigned short gt917d_short_threshold = 10;
unsigned short gt917d_resistor_threshold = 800;
unsigned short gt917d_gnd_resistor_threshold = 500;

//QFN88 package TX Pin, used for get channel number from Chip to Pad
const u8 ChannelPackage_TX[MAX_DRIVER_NUM] = {
	0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
	20, 21, 22, 23, 24, 25, /*26,*/27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37,
	38, 39, 40, 41, 42
};

enum {
    TIME_INFO_SKIP,
    TIME_INFO_WRITE,
};

enum {
    TEST_PASS = 0,
    TEST_FAIL,
};

struct gt917d_short_info {
	u8 master;
	u8 master_is_driver;
	u8 slave;
	u8 slave_is_driver;
	u16 short_code;
	u16 self_data;
	u16 impedance;
};

struct gt917d_open_info {
	u8 driver;
	u8 sensor;
	u16 raw_val;
	s32 beyond_type;	// limit type
	u8 times;		// test fail times
	u8 key;			// 0: nonekey, others: key_no(1-4)
};

struct gt917d_iot_result_info {
	u8 testitem;
	char result;
	char stringline;
};

#endif /* LGE_TOUCH_GT917D_PRD_H */
